
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 08 14:58:48 CEST 2022
//----------------------------------------------------

package tiny1.ast_ascendente;

import java_cup.runtime.*;
import tiny1.alex.AnalizadorLexicoTiny;
import tiny1.alex.UnidadLexica;
import tiny1.errors.GestionErroresTiny;
import tiny1.semops.SemOps;
import tiny1.asint.StringLocalizado;
import tiny1.asint.nodos.bloques.*;
import tiny1.asint.nodos.campos.*;
import tiny1.asint.nodos.declaraciones.*;
import tiny1.asint.nodos.expresiones.*;
import tiny1.asint.nodos.instrucciones.*;
import tiny1.asint.nodos.parametros.*;
import tiny1.asint.nodos.tipos.*;
import tiny1.asint.nodos.programa.Programa;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 08 14:58:48 CEST 2022
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\005\005" +
    "\000\002\005\005\000\002\005\006\000\002\007\005\000" +
    "\002\007\004\000\002\006\005\000\002\006\003\000\002" +
    "\010\005\000\002\010\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\010\000\002\011\004\000\002\011\006\000" +
    "\002\012\005\000\002\012\003\000\002\013\004\000\002" +
    "\004\005\000\002\004\003\000\002\014\005\000\002\015" +
    "\003\000\002\015\002\000\002\014\007\000\002\014\011" +
    "\000\002\014\007\000\002\014\004\000\002\014\004\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\014\005\000\002\014\003\000\002\031\004\000\002\031" +
    "\005\000\002\030\005\000\002\030\003\000\002\032\005" +
    "\000\002\032\004\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\021\005" +
    "\000\002\021\003\000\002\022\005\000\002\022\003\000" +
    "\002\023\005\000\002\023\003\000\002\024\004\000\002" +
    "\024\004\000\002\024\003\000\002\025\006\000\002\025" +
    "\005\000\002\025\003\000\002\026\004\000\002\026\003" +
    "\000\002\027\005\000\002\027\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\060\012\015\013\040\015\021\016\004\022" +
    "\010\031\027\036\032\045\022\046\036\047\013\053\034" +
    "\056\012\063\016\064\006\065\033\066\007\067\030\070" +
    "\050\071\011\072\035\073\024\074\026\075\017\001\002" +
    "\000\024\012\015\013\040\016\004\031\027\045\022\072" +
    "\035\073\024\074\026\075\017\001\002\000\006\007\224" +
    "\010\225\001\002\000\030\012\015\013\040\015\021\016" +
    "\004\022\010\031\027\045\022\072\035\073\024\074\026" +
    "\075\017\001\002\000\030\012\015\013\040\015\021\016" +
    "\004\022\010\031\027\045\022\072\035\073\024\074\026" +
    "\075\017\001\002\000\030\012\015\013\040\015\021\016" +
    "\004\022\010\031\027\045\022\072\035\073\024\074\026" +
    "\075\017\001\002\000\022\004\073\005\102\006\075\044" +
    "\101\057\077\060\076\062\103\074\100\001\002\000\004" +
    "\074\206\001\002\000\030\012\015\013\040\015\021\016" +
    "\004\022\010\031\027\045\022\072\035\073\024\074\026" +
    "\075\017\001\002\000\016\002\uffe7\010\uffe7\037\uffe7\051" +
    "\uffe7\052\uffe7\055\uffe7\001\002\000\072\002\uffcf\010\uffcf" +
    "\011\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\043\uffcf\050\uffcf\051\uffcf\052\uffcf\054\uffcf\055\uffcf" +
    "\001\002\000\030\012\015\013\040\015\021\016\004\022" +
    "\010\031\027\045\022\072\035\073\024\074\026\075\017" +
    "\001\002\000\072\002\uffcc\010\uffcc\011\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\054\uffcc\055\uffcc\001\002\000\072\002" +
    "\uffb9\010\uffb9\011\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\043\uffb9\050\uffb9\051\uffb9\052\uffb9\054" +
    "\uffb9\055\uffb9\001\002\000\024\012\015\013\040\016\004" +
    "\031\027\045\022\072\035\073\024\074\026\075\017\001" +
    "\002\000\072\002\uffcd\010\uffcd\011\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\037\uffcd\040\uffcd\041\uffcd\043\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\054\uffcd\055\uffcd\001\002\000\004\002\174" +
    "\001\002\000\072\002\uffd1\010\uffd1\011\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1\043\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\054\uffd1\055\uffd1\001\002\000\016\002" +
    "\uffda\010\uffda\037\uffda\051\uffda\052\uffda\055\uffda\001\002" +
    "\000\072\002\uffd0\010\uffd0\011\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\043\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\054\uffd0\055\uffd0\001\002\000\030\012\015\013" +
    "\040\015\021\016\004\022\010\031\027\045\022\072\035" +
    "\073\024\074\026\075\017\001\002\000\016\002\uffde\010" +
    "\uffde\037\uffde\051\uffde\052\uffde\055\uffde\001\002\000\010" +
    "\002\uffff\010\163\037\uffff\001\002\000\062\012\015\013" +
    "\040\015\021\016\004\022\010\031\027\036\032\037\170" +
    "\045\022\046\036\047\013\053\034\056\012\063\016\064" +
    "\006\065\033\066\007\067\030\070\050\071\011\072\035" +
    "\073\024\074\026\075\017\001\002\000\030\012\015\013" +
    "\040\015\021\016\004\022\010\031\027\045\022\072\035" +
    "\073\024\074\026\075\017\001\002\000\030\012\015\013" +
    "\040\015\021\016\004\022\010\031\027\045\022\072\035" +
    "\073\024\074\026\075\017\001\002\000\072\002\uffd2\010" +
    "\uffd2\011\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\043\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2\055" +
    "\uffd2\001\002\000\004\074\141\001\002\000\072\002\uffbb" +
    "\010\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\043\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb" +
    "\055\uffbb\001\002\000\072\002\uffce\010\uffce\011\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\037\uffce\040\uffce\041\uffce\043\uffce" +
    "\050\uffce\051\uffce\052\uffce\054\uffce\055\uffce\001\002\000" +
    "\072\002\uffbd\010\uffbd\011\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\043\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\054\uffbd\055\uffbd\001\002\000\006\007\ufffd\010\ufffd" +
    "\001\002\000\072\002\uffc0\010\uffc0\011\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\032\uffc0\033\uffc0\034" +
    "\132\035\uffc0\037\uffc0\040\134\041\133\043\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\054\uffc0\055\uffc0\001\002\000\064\002" +
    "\uffc3\010\uffc3\011\uffc3\014\uffc3\015\uffc3\016\130\017\127" +
    "\020\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\032\uffc3\033\126\035\uffc3\037\uffc3\043\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\054\uffc3\055\uffc3\001\002\000" +
    "\004\011\123\001\002\000\056\002\uffc5\010\uffc5\011\uffc5" +
    "\014\uffc5\015\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\035\uffc5\037\uffc5" +
    "\043\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\055\uffc5\001" +
    "\002\000\056\002\uffc7\010\uffc7\011\uffc7\014\uffc7\015\uffc7" +
    "\020\uffc7\021\uffc7\023\067\024\070\025\063\026\062\027" +
    "\065\030\066\032\uffc7\035\uffc7\037\uffc7\043\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\054\uffc7\055\uffc7\001\002\000\022\004" +
    "\073\005\102\006\075\044\101\057\077\060\076\062\103" +
    "\074\100\001\002\000\042\002\uffc9\010\uffc9\011\uffc9\014" +
    "\053\015\056\020\054\021\057\032\uffc9\035\uffc9\037\uffc9" +
    "\043\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9\055\uffc9\001" +
    "\002\000\032\002\uffd3\010\uffd3\011\uffd3\032\uffd3\035\uffd3" +
    "\037\uffd3\043\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\055" +
    "\uffd3\001\002\000\030\012\015\013\040\015\021\016\004" +
    "\022\010\031\027\045\022\072\035\073\024\074\026\075" +
    "\017\001\002\000\030\012\uffb8\013\uffb8\015\uffb8\016\uffb8" +
    "\022\uffb8\031\uffb8\045\uffb8\072\uffb8\073\uffb8\074\uffb8\075" +
    "\uffb8\001\002\000\030\012\015\013\040\015\021\016\004" +
    "\022\010\031\027\045\022\072\035\073\024\074\026\075" +
    "\017\001\002\000\030\012\015\013\040\015\021\016\004" +
    "\022\010\031\027\045\022\072\035\073\024\074\026\075" +
    "\017\001\002\000\030\012\uffb7\013\uffb7\015\uffb7\016\uffb7" +
    "\022\uffb7\031\uffb7\045\uffb7\072\uffb7\073\uffb7\074\uffb7\075" +
    "\uffb7\001\002\000\036\002\uffca\010\uffca\011\uffca\020\054" +
    "\021\057\032\uffca\035\uffca\037\uffca\043\uffca\050\uffca\051" +
    "\uffca\052\uffca\054\uffca\055\uffca\001\002\000\056\002\uffc8" +
    "\010\uffc8\011\uffc8\014\uffc8\015\uffc8\020\uffc8\021\uffc8\023" +
    "\067\024\070\025\063\026\062\027\065\030\066\032\uffc8" +
    "\035\uffc8\037\uffc8\043\uffc8\050\uffc8\051\uffc8\052\uffc8\054" +
    "\uffc8\055\uffc8\001\002\000\030\012\uffb4\013\uffb4\015\uffb4" +
    "\016\uffb4\022\uffb4\031\uffb4\045\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\001\002\000\030\012\uffb3\013\uffb3\015\uffb3" +
    "\016\uffb3\022\uffb3\031\uffb3\045\uffb3\072\uffb3\073\uffb3\074" +
    "\uffb3\075\uffb3\001\002\000\030\012\015\013\040\015\021" +
    "\016\004\022\010\031\027\045\022\072\035\073\024\074" +
    "\026\075\017\001\002\000\030\012\uffb2\013\uffb2\015\uffb2" +
    "\016\uffb2\022\uffb2\031\uffb2\045\uffb2\072\uffb2\073\uffb2\074" +
    "\uffb2\075\uffb2\001\002\000\030\012\uffb1\013\uffb1\015\uffb1" +
    "\016\uffb1\022\uffb1\031\uffb1\045\uffb1\072\uffb1\073\uffb1\074" +
    "\uffb1\075\uffb1\001\002\000\030\012\uffb5\013\uffb5\015\uffb5" +
    "\016\uffb5\022\uffb5\031\uffb5\045\uffb5\072\uffb5\073\uffb5\074" +
    "\uffb5\075\uffb5\001\002\000\030\012\uffb6\013\uffb6\015\uffb6" +
    "\016\uffb6\022\uffb6\031\uffb6\045\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\001\002\000\056\002\uffc6\010\uffc6\011\uffc6" +
    "\014\uffc6\015\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\032\uffc6\035\uffc6\037\uffc6" +
    "\043\uffc6\050\uffc6\051\uffc6\052\uffc6\054\uffc6\055\uffc6\001" +
    "\002\000\032\002\uffcb\010\uffcb\011\uffcb\032\uffcb\035\uffcb" +
    "\037\uffcb\043\uffcb\050\uffcb\051\uffcb\052\uffcb\054\uffcb\055" +
    "\uffcb\001\002\000\006\042\ufff3\074\ufff3\001\002\000\004" +
    "\074\122\001\002\000\006\042\ufff1\074\ufff1\001\002\000" +
    "\004\034\115\001\002\000\004\036\105\001\002\000\006" +
    "\042\uffef\074\uffef\001\002\000\006\042\ufff0\074\ufff0\001" +
    "\002\000\006\042\ufff2\074\ufff2\001\002\000\022\004\073" +
    "\005\102\006\075\044\101\057\077\060\076\062\103\074" +
    "\100\001\002\000\006\042\uffed\074\uffed\001\002\000\022" +
    "\004\073\005\102\006\075\044\101\057\077\060\076\062" +
    "\103\074\100\001\002\000\004\074\114\001\002\000\006" +
    "\010\111\037\112\001\002\000\006\010\uffea\037\uffea\001" +
    "\002\000\022\004\073\005\102\006\075\044\101\057\077" +
    "\060\076\062\103\074\100\001\002\000\006\042\uffec\074" +
    "\uffec\001\002\000\006\010\uffeb\037\uffeb\001\002\000\006" +
    "\010\uffe9\037\uffe9\001\002\000\004\072\116\001\002\000" +
    "\004\035\117\001\002\000\004\061\120\001\002\000\022" +
    "\004\073\005\102\006\075\044\101\057\077\060\076\062" +
    "\103\074\100\001\002\000\006\042\uffee\074\uffee\001\002" +
    "\000\006\007\ufffc\010\ufffc\001\002\000\030\012\015\013" +
    "\040\015\021\016\004\022\010\031\027\045\022\072\035" +
    "\073\024\074\026\075\017\001\002\000\016\002\uffe6\010" +
    "\uffe6\037\uffe6\051\uffe6\052\uffe6\055\uffe6\001\002\000\030" +
    "\012\015\013\040\015\021\016\004\022\010\031\027\045" +
    "\022\072\035\073\024\074\026\075\017\001\002\000\030" +
    "\012\uffae\013\uffae\015\uffae\016\uffae\022\uffae\031\uffae\045" +
    "\uffae\072\uffae\073\uffae\074\uffae\075\uffae\001\002\000\030" +
    "\012\uffaf\013\uffaf\015\uffaf\016\uffaf\022\uffaf\031\uffaf\045" +
    "\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\001\002\000\030" +
    "\012\uffb0\013\uffb0\015\uffb0\016\uffb0\022\uffb0\031\uffb0\045" +
    "\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\001\002\000\056" +
    "\002\uffc4\010\uffc4\011\uffc4\014\uffc4\015\uffc4\020\uffc4\021" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\032\uffc4\035\uffc4\037\uffc4\043\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\054\uffc4\055\uffc4\001\002\000\030\012\015\013\040" +
    "\015\021\016\004\022\010\031\027\045\022\072\035\073" +
    "\024\074\026\075\017\001\002\000\004\074\uffac\001\002" +
    "\000\004\074\uffad\001\002\000\004\074\136\001\002\000" +
    "\072\002\uffbe\010\uffbe\011\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\043\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\054\uffbe\055\uffbe\001\002\000\004\035\140\001\002" +
    "\000\072\002\uffbf\010\uffbf\011\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\054\uffbf\055\uffbf\001\002\000\004\031\142\001" +
    "\002\000\024\004\073\005\102\006\075\032\150\044\101" +
    "\057\077\060\076\062\103\074\100\001\002\000\004\036" +
    "\032\001\002\000\006\007\ufffa\010\ufffa\001\002\000\006" +
    "\032\ufff6\043\ufff6\001\002\000\006\042\154\074\155\001" +
    "\002\000\006\032\152\043\151\001\002\000\004\036\ufff8" +
    "\001\002\000\022\004\073\005\102\006\075\044\101\057" +
    "\077\060\076\062\103\074\100\001\002\000\004\036\ufff9" +
    "\001\002\000\006\032\ufff7\043\ufff7\001\002\000\004\074" +
    "\156\001\002\000\006\032\ufff4\043\ufff4\001\002\000\006" +
    "\032\ufff5\043\ufff5\001\002\000\004\054\160\001\002\000" +
    "\054\012\015\013\040\015\021\016\004\022\010\031\027" +
    "\036\032\045\022\047\013\053\034\055\uffe4\056\012\063" +
    "\016\064\006\065\033\066\007\067\030\072\035\073\024" +
    "\074\026\075\017\001\002\000\004\055\165\001\002\000" +
    "\012\010\163\051\uffe5\052\uffe5\055\uffe5\001\002\000\052" +
    "\012\015\013\040\015\021\016\004\022\010\031\027\036" +
    "\032\045\022\047\013\053\034\056\012\063\016\064\006" +
    "\065\033\066\007\067\030\072\035\073\024\074\026\075" +
    "\017\001\002\000\016\002\uffe8\010\uffe8\037\uffe8\051\uffe8" +
    "\052\uffe8\055\uffe8\001\002\000\016\002\uffe1\010\uffe1\037" +
    "\uffe1\051\uffe1\052\uffe1\055\uffe1\001\002\000\016\002\uffe0" +
    "\010\uffe0\037\uffe0\051\uffe0\052\uffe0\055\uffe0\001\002\000" +
    "\004\037\171\001\002\000\020\002\uffd4\007\uffd4\010\uffd4" +
    "\037\uffd4\051\uffd4\052\uffd4\055\uffd4\001\002\000\020\002" +
    "\uffd5\007\uffd5\010\uffd5\037\uffd5\051\uffd5\052\uffd5\055\uffd5" +
    "\001\002\000\004\032\173\001\002\000\072\002\uffba\010" +
    "\uffba\011\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba" +
    "\041\uffba\043\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055" +
    "\uffba\001\002\000\004\002\000\001\002\000\072\002\uffc1" +
    "\010\uffc1\011\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\032\uffc1\033\uffc1\034\132\035\uffc1\037\uffc1\040" +
    "\134\041\133\043\uffc1\050\uffc1\051\uffc1\052\uffc1\054\uffc1" +
    "\055\uffc1\001\002\000\016\002\uffdd\010\uffdd\037\uffdd\051" +
    "\uffdd\052\uffdd\055\uffdd\001\002\000\004\050\200\001\002" +
    "\000\056\012\015\013\040\015\021\016\004\022\010\031" +
    "\027\036\032\045\022\047\013\051\uffe4\052\uffe4\053\034" +
    "\056\012\063\016\064\006\065\033\066\007\067\030\072" +
    "\035\073\024\074\026\075\017\001\002\000\006\051\202" +
    "\052\203\001\002\000\054\012\015\013\040\015\021\016" +
    "\004\022\010\031\027\036\032\045\022\047\013\052\uffe4" +
    "\053\034\056\012\063\016\064\006\065\033\066\007\067" +
    "\030\072\035\073\024\074\026\075\017\001\002\000\016" +
    "\002\uffe3\010\uffe3\037\uffe3\051\uffe3\052\uffe3\055\uffe3\001" +
    "\002\000\004\052\205\001\002\000\016\002\uffe2\010\uffe2" +
    "\037\uffe2\051\uffe2\052\uffe2\055\uffe2\001\002\000\004\031" +
    "\207\001\002\000\032\012\015\013\040\015\021\016\004" +
    "\022\010\031\027\032\211\045\022\072\035\073\024\074" +
    "\026\075\017\001\002\000\016\002\uffdb\010\uffdb\037\uffdb" +
    "\051\uffdb\052\uffdb\055\uffdb\001\002\000\016\002\uffd9\010" +
    "\uffd9\037\uffd9\051\uffd9\052\uffd9\055\uffd9\001\002\000\006" +
    "\032\215\043\214\001\002\000\006\032\uffd6\043\uffd6\001" +
    "\002\000\030\012\015\013\040\015\021\016\004\022\010" +
    "\031\027\045\022\072\035\073\024\074\026\075\017\001" +
    "\002\000\016\002\uffd8\010\uffd8\037\uffd8\051\uffd8\052\uffd8" +
    "\055\uffd8\001\002\000\006\032\uffd7\043\uffd7\001\002\000" +
    "\004\074\220\001\002\000\006\007\ufffb\010\ufffb\001\002" +
    "\000\064\002\uffc2\010\uffc2\011\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\032\uffc2\033\uffc2\035\uffc2\037" +
    "\uffc2\043\uffc2\050\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2" +
    "\001\002\000\016\002\uffdf\010\uffdf\037\uffdf\051\uffdf\052" +
    "\uffdf\055\uffdf\001\002\000\016\002\uffdc\010\uffdc\037\uffdc" +
    "\051\uffdc\052\uffdc\055\uffdc\001\002\000\052\012\015\013" +
    "\040\015\021\016\004\022\010\031\027\036\032\045\022" +
    "\047\013\053\034\056\012\063\016\064\006\065\033\066" +
    "\007\067\030\072\035\073\024\074\026\075\017\001\002" +
    "\000\010\046\036\070\050\071\011\001\002\000\006\007" +
    "\ufffe\010\ufffe\001\002\000\010\002\001\010\163\037\001" +
    "\001\002\000\072\002\uffbc\010\uffbc\011\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\043\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\054\uffbc\055\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\042\002\022\003\004\004\030\005\041\014" +
    "\013\016\044\017\017\020\051\021\050\022\046\023\045" +
    "\024\043\025\042\026\040\027\036\032\024\001\001\000" +
    "\010\017\017\026\227\027\036\001\001\000\002\001\001" +
    "\000\026\016\222\017\017\020\051\021\050\022\046\023" +
    "\045\024\043\025\042\026\040\027\036\001\001\000\026" +
    "\016\221\017\017\020\051\021\050\022\046\023\045\024" +
    "\043\025\042\026\040\027\036\001\001\000\014\017\017" +
    "\024\220\025\042\026\040\027\036\001\001\000\004\011" +
    "\216\001\001\000\002\001\001\000\026\016\176\017\017" +
    "\020\051\021\050\022\046\023\045\024\043\025\042\026" +
    "\040\027\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\016\175\017\017\020\051\021\050\022\046\023" +
    "\045\024\043\025\042\026\040\027\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\017\025\174\026" +
    "\040\027\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\016\171\017\017\020\051\021\050\022\046\023\045" +
    "\024\043\025\042\026\040\027\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\002\166\003\004\004\030" +
    "\005\041\014\013\016\044\017\017\020\051\021\050\022" +
    "\046\023\045\024\043\025\042\026\040\027\036\032\024" +
    "\001\001\000\026\016\165\017\017\020\051\021\050\022" +
    "\046\023\045\024\043\025\042\026\040\027\036\001\001" +
    "\000\026\016\156\017\017\020\051\021\050\022\046\023" +
    "\045\024\043\025\042\026\040\027\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\134" +
    "\001\001\000\004\035\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\063\001\001\000\004\011\073" +
    "\001\001\000\004\033\054\001\001\000\002\001\001\000" +
    "\024\017\017\020\071\021\050\022\046\023\045\024\043" +
    "\025\042\026\040\027\036\001\001\000\002\001\001\000" +
    "\020\017\017\022\060\023\045\024\043\025\042\026\040" +
    "\027\036\001\001\000\022\017\017\021\057\022\046\023" +
    "\045\024\043\025\042\026\040\027\036\001\001\000\002" +
    "\001\001\000\004\033\054\001\001\000\004\034\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\017" +
    "\023\070\024\043\025\042\026\040\027\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\103\001\001\000\002\001\001" +
    "\000\010\011\105\012\106\013\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\105" +
    "\013\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\016\123\017\017\020\051\021\050" +
    "\022\046\023\045\024\043\025\042\026\040\027\036\001" +
    "\001\000\002\001\001\000\014\017\017\024\130\025\042" +
    "\026\040\027\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\016\136" +
    "\017\017\020\051\021\050\022\046\023\045\024\043\025" +
    "\042\026\040\027\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\142\001\001\000\010" +
    "\006\146\010\144\011\145\001\001\000\004\032\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\152\011" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\161\014\013\015\160\016\044\017\017" +
    "\020\051\021\050\022\046\023\045\024\043\025\042\026" +
    "\040\027\036\032\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\014\163\016\044\017\017\020\051\021" +
    "\050\022\046\023\045\024\043\025\042\026\040\027\036" +
    "\032\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\161\014\013\015\200\016\044\017" +
    "\017\020\051\021\050\022\046\023\045\024\043\025\042" +
    "\026\040\027\036\032\024\001\001\000\002\001\001\000" +
    "\036\004\161\014\013\015\203\016\044\017\017\020\051" +
    "\021\050\022\046\023\045\024\043\025\042\026\040\027" +
    "\036\032\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\207\001\001\000\030\016" +
    "\212\017\017\020\051\021\050\022\046\023\045\024\043" +
    "\025\042\026\040\027\036\030\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\016\215\017\017\020\051\021\050\022\046\023" +
    "\045\024\043\025\042\026\040\027\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\226\014\013\016\044\017\017\020\051\021" +
    "\050\022\046\023\045\024\043\025\042\026\040\027\036" +
    "\032\024\001\001\000\004\005\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private SemOps sem = new SemOps();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Declaraciones SEP_SEC Instrucciones 
            {
              Programa RESULT =null;
		Declaraciones decs = (Declaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Instrucciones instrs = (Instrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.prog_con_decs(decs,instrs); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Instrucciones 
            {
              Programa RESULT =null;
		Instrucciones instrs = (Instrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.prog_sin_decs(instrs); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaraciones PCOMA Declaracion 
            {
              Declaraciones RESULT =null;
		Declaraciones decs = (Declaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.decs_muchas(decs, dec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaracion 
            {
              Declaraciones RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.decs_una(dec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion ::= VAR Tipo VARIABLE 
            {
              Declaracion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.dec_var(tipo, id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= TYPE Tipo VARIABLE 
            {
              Declaracion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.dec_type(tipo, id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= PROC VARIABLE Params Bloque 
            {
              Declaracion RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ListaParams params = (ListaParams)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.dec_proc(id, params, bloque); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Params ::= PAPERTURA ListaParams PCIERRE 
            {
              ListaParams RESULT =null;
		ListaParams lp = (ListaParams)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = lp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Params ::= PAPERTURA PCIERRE 
            {
              ListaParams RESULT =null;
		 RESULT = sem.params_sin(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListaParams ::= ListaParams COMA Param 
            {
              ListaParams RESULT =null;
		ListaParams lp = (ListaParams)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.lista_params_muchos(lp, p); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaParams",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListaParams ::= Param 
            {
              ListaParams RESULT =null;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.lista_params_uno(p); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaParams",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Param ::= Tipo AMPERSAND VARIABLE 
            {
              Parametro RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.param_ref(tipo, id.toString()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Param ::= Tipo VARIABLE 
            {
              Parametro RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.param_valor(tipo, id.toString()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.int_(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.real_(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.bool_(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.string_(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= VARIABLE 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.tipo_nuevo(id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= ARRAY CORAPERTURA NUM_ENTERO CORCIERRE OF Tipo 
            {
              Tipo RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.tipo_array(num, tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= POINTER Tipo 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.tipo_pointer(tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= RECORD LLAVE_APERTURA Campos LLAVE_CIERRE 
            {
              Tipo RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.tipo_record(campos); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Campos ::= Campos PCOMA Campo 
            {
              Campos RESULT =null;
		Campos cs = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Campo c = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.campos_muchos(cs, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campos",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Campos ::= Campo 
            {
              Campos RESULT =null;
		Campo c = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.campos_uno(c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campos",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Campo ::= Tipo VARIABLE 
            {
              Campo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.campo(tipo, id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instrucciones ::= Instrucciones PCOMA Instruccion 
            {
              Instrucciones RESULT =null;
		Instrucciones instrs = (Instrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Instruccion instr = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.instr_muchas(instrs, instr); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instrucciones ::= Instruccion 
            {
              Instrucciones RESULT =null;
		Instruccion instr = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.instr_una(instr); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruccion ::= Expresion IGUAL_ASIG Expresion 
            {
              Instruccion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.instr_asig(e1, e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // InstruccionesOpt ::= Instrucciones 
            {
              InstruccionesOpt RESULT =null;
		Instrucciones instrs = (Instrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.instr_opt_muchas(instrs); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionesOpt",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // InstruccionesOpt ::= 
            {
              InstruccionesOpt RESULT =null;
		 RESULT = sem.instr_opt_ninguna(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionesOpt",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= IF Expresion THEN InstruccionesOpt ENDIF 
            {
              Instruccion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		InstruccionesOpt ins = (InstruccionesOpt)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.instr_if(exp, ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruccion ::= IF Expresion THEN InstruccionesOpt ELSE InstruccionesOpt ENDIF 
            {
              Instruccion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		InstruccionesOpt ins1 = (InstruccionesOpt)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		InstruccionesOpt ins2 = (InstruccionesOpt)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.instr_if_else(exp, ins1, ins2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruccion ::= WHILE Expresion DO InstruccionesOpt ENDWHILE 
            {
              Instruccion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		InstruccionesOpt ins = (InstruccionesOpt)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.instr_while(exp, ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= READ Expresion 
            {
              Instruccion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.instr_read(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= WRITE Expresion 
            {
              Instruccion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.instr_write(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= NL 
            {
              Instruccion RESULT =null;
		 RESULT = sem.instr_nl(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= NEW Expresion 
            {
              Instruccion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.instr_new(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= DELETE Expresion 
            {
              Instruccion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.instr_delete(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= CALL VARIABLE ParamsReal 
            {
              Instruccion RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresiones params = (Expresiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.instr_call(id, params); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= Bloque 
            {
              Instruccion RESULT =null;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.instr_bloque(bloque); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ParamsReal ::= PAPERTURA PCIERRE 
            {
              Expresiones RESULT =null;
		 RESULT = sem.expresiones_ninguna(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamsReal",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ParamsReal ::= PAPERTURA Expresiones PCIERRE 
            {
              Expresiones RESULT =null;
		Expresiones exps = (Expresiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = exps; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamsReal",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresiones ::= Expresiones COMA Expresion 
            {
              Expresiones RESULT =null;
		Expresiones exps = (Expresiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.expresiones_muchas(exps, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expresiones",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresiones ::= Expresion 
            {
              Expresiones RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.expresiones_una(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expresiones",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bloque ::= LLAVE_APERTURA Programa LLAVE_CIERRE 
            {
              Bloque RESULT =null;
		Programa prog = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.bloque_lleno(prog); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bloque ::= LLAVE_APERTURA LLAVE_CIERRE 
            {
              Bloque RESULT =null;
		 RESULT = sem.bloque_vacio(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= E0 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expresion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpresionBasica ::= NUM_ENTERO 
            {
              Expresion RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.num_entero(num); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpresionBasica ::= NUM_REAL 
            {
              Expresion RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.num_real(num); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpresionBasica ::= VARIABLE 
            {
              Expresion RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.id(id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpresionBasica ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = sem.true_(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpresionBasica ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = sem.false_(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpresionBasica ::= NULL 
            {
              Expresion RESULT =null;
		 RESULT = sem.nulo(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionBasica ::= CADENA 
            {
              Expresion RESULT =null;
		StringLocalizado cadena = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.cadena(cadena); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E0 ::= E1 MAS E0 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.suma(e1, e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E0 ::= E1 MENOS E1 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.resta(e1, e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E0 ::= E1 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E1 ::= E1 OP1 E2 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp(op, e1, e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E2 OP2 E3 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp(op, e1, e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E3 ::= E4 OP3 E4 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp(op, e1, e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E4 ::= NOT E4 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.not(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E4 ::= MENOS E5 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.menos(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E5 ::= E5 CORAPERTURA Expresion CORCIERRE 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.acceso_array(e1, e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E5 ::= E5 OP5 VARIABLE 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.acceso_registro(op, e, id.toString()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E6 ::= POR E6 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.valor_puntero(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= PAPERTURA Expresion PCIERRE 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= ExpresionBasica 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP1 ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP1 ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP2 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP2 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP2 ::= MAYOR_IG 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP2 ::= MENOR_IG 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP2 ::= IGUAL_COMP 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP2 ::= DISTINTO 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP3 ::= POR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP3 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP3 ::= POR_CIENTO 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP5 ::= PUNTO 
            {
              String RESULT =null;
		 RESULT = "."; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP5 ::= FLECHA 
            {
              String RESULT =null;
		 RESULT = "->"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

