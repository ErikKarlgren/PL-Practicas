package tiny1.ast_ascendente;

import java_cup.runtime.*;
import tiny1.alex.AnalizadorLexicoTiny;
import tiny1.alex.UnidadLexica;
import tiny1.errors.GestionErroresTiny;
import tiny1.semops.SemOps;
import tiny1.asint.StringLocalizado;
import tiny1.asint.nodos.bloques.*;
import tiny1.asint.nodos.campos.*;
import tiny1.asint.nodos.declaraciones.*;
import tiny1.asint.nodos.expresiones.*;
import tiny1.asint.nodos.instrucciones.*;
import tiny1.asint.nodos.parametros.*;
import tiny1.asint.nodos.tipos.*;
import tiny1.asint.nodos.programa.Programa;

scan with {: return getScanner().next_token(); :};
action code {:
   private SemOps sem = new SemOps();
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal INT, REAL, BOOL, SEP_SEC, PCOMA, IGUAL_ASIG, TRUE, FALSE, MAS, MENOS, 
	      POR, DIV, AND, OR, NOT, MENOR, MAYOR, MENOR_IG, MAYOR_IG, IGUAL_COMP, DISTINTO, PAPERTURA, PCIERRE, 
	      POR_CIENTO, CORAPERTURA, CORCIERRE, LLAVE_APERTURA, LLAVE_CIERRE, PUNTO, FLECHA, AMPERSAND, COMA, 
	      STRING, NULL, PROC, IF, THEN, ELSE, ENDIF, WHILE, DO, ENDWHILE, CALL, RECORD, ARRAY, OF, POINTER, NEW, DELETE, 
	      READ, WRITE, NL, VAR, TYPE;
terminal StringLocalizado NUM_ENTERO, NUM_REAL, VARIABLE, CADENA;

non terminal Programa Programa;
non terminal Declaraciones Declaraciones;
non terminal Instrucciones Instrucciones;
non terminal Declaracion Declaracion;
non terminal ListaParams ListaParams, Params;
non terminal Parametro Param;
non terminal Tipo Tipo;
non terminal Campos Campos;
non terminal Campo Campo;
non terminal Instruccion Instruccion;
non terminal InstruccionesOpt InstruccionesOpt;
non terminal Expresion Expresion, ExpresionBasica, E0, E1, E2, E3, E4, E5, E6, E7;
non terminal Expresiones Expresiones, ParamsReal;
non terminal Bloque Bloque;
non terminal String OP1, OP2, OP3, OP5;


Programa ::= Declaraciones: decs SEP_SEC Instrucciones: instrs
    {: RESULT = sem.prog_con_decs(decs,instrs); :};
Programa ::= Instrucciones: instrs
    {: RESULT = sem.prog_sin_decs(instrs); :};
Declaraciones ::= Declaraciones: decs PCOMA Declaracion: dec
    {: RESULT = sem.decs_muchas(decs, dec); :};
Declaraciones ::= Declaracion: dec
    {: RESULT = sem.decs_una(dec); :};
Declaracion ::= VAR Tipo: tipo VARIABLE: id
    {: RESULT = sem.dec_var(tipo, id); :};
Declaracion ::= TYPE Tipo: tipo VARIABLE: id
    {: RESULT = sem.dec_type(tipo, id); :};
Declaracion ::= PROC VARIABLE: id Params: params Bloque: bloque
    {: RESULT = sem.dec_proc(id, params, bloque); :};
Params ::= PAPERTURA ListaParams: lp PCIERRE
    {: RESULT = lp; :};
Params ::= PAPERTURA PCIERRE
    {: RESULT = sem.params_sin(); :};
ListaParams ::= ListaParams: lp COMA Param: p
    {: RESULT = sem.lista_params_muchos(lp, p); :};
ListaParams ::= Param: p
    {: RESULT = sem.lista_params_uno(p); :};
Param ::= Tipo: tipo AMPERSAND VARIABLE: id
    {: RESULT = sem.param_ref(tipo, id.toString()); :};
Param ::= Tipo: tipo VARIABLE: id
    {: RESULT = sem.param_valor(tipo, id.toString()); :};

Tipo ::= INT
    {: RESULT = sem.int_(); :};
Tipo ::= REAL
    {: RESULT = sem.real_(); :};
Tipo ::= BOOL
    {: RESULT = sem.bool_(); :};
Tipo ::= STRING
    {: RESULT = sem.string_(); :};
Tipo ::= VARIABLE: id
    {: RESULT = sem.tipo_nuevo(id); :};
Tipo ::= ARRAY CORAPERTURA NUM_ENTERO: num CORCIERRE OF Tipo: tipo
    {: RESULT = sem.tipo_array(num, tipo); :};
Tipo ::= POINTER Tipo: tipo
    {: RESULT = sem.tipo_pointer(tipo); :};
Tipo ::= RECORD LLAVE_APERTURA Campos: campos LLAVE_CIERRE
    {: RESULT = sem.tipo_record(campos); :};
Campos ::= Campos: cs PCOMA Campo: c
    {: RESULT = sem.campos_muchos(cs, c); :};
Campos ::= Campo: c
    {: RESULT = sem.campos_uno(c); :};
Campo ::= Tipo: tipo VARIABLE: id
    {: RESULT = sem.campo(tipo, id); :};
Instrucciones ::= Instrucciones: instrs PCOMA Instruccion: instr
    {: RESULT = sem.instr_muchas(instrs, instr); :};
Instrucciones ::= Instruccion: instr
    {: RESULT = sem.instr_una(instr); :};
Instruccion ::= Expresion: e1 IGUAL_ASIG Expresion: e2 
    {: RESULT = sem.instr_asig(e1, e2); :};
InstruccionesOpt ::= Instrucciones: instrs
    {: RESULT = sem.instr_opt_muchas(instrs); :};
InstruccionesOpt ::= 
    {: RESULT = sem.instr_opt_ninguna(); :};
Instruccion ::= IF Expresion: exp THEN InstruccionesOpt: ins ENDIF
    {: RESULT = sem.instr_if(exp, ins); :};
Instruccion ::= IF Expresion: exp THEN InstruccionesOpt: ins1 ELSE InstruccionesOpt: ins2 ENDIF
    {: RESULT = sem.instr_if_else(exp, ins1, ins2); :};
Instruccion ::= WHILE Expresion: exp DO InstruccionesOpt: ins ENDWHILE
    {: RESULT = sem.instr_while(exp, ins); :};
Instruccion ::= READ Expresion: exp
    {: RESULT = sem.instr_read(exp); :};
Instruccion ::= WRITE Expresion: exp
    {: RESULT = sem.instr_write(exp); :};
Instruccion ::= NL
    {: RESULT = sem.instr_nl(); :};
Instruccion ::= NEW Expresion: exp
    {: RESULT = sem.instr_new(exp); :};
Instruccion ::= DELETE Expresion: exp
    {: RESULT = sem.instr_delete(exp); :};
Instruccion ::= CALL VARIABLE: id ParamsReal: params
    {: RESULT = sem.instr_call(id, params); :};
Instruccion ::= Bloque: bloque
    {: RESULT = sem.instr_bloque(bloque); :};

ParamsReal ::= PAPERTURA PCIERRE
    {: RESULT = sem.expresiones_ninguna(); :};
ParamsReal ::= PAPERTURA Expresiones: exps PCIERRE
    {: RESULT = exps; :};
Expresiones ::= Expresiones: exps COMA Expresion: exp
    {: RESULT = sem.expresiones_muchas(exps, exp); :};
Expresiones ::= Expresion: exp
    {: RESULT = sem.expresiones_una(exp); :};

Bloque ::= LLAVE_APERTURA Programa: prog LLAVE_CIERRE
    {: RESULT = sem.bloque_lleno(prog); :};
Bloque ::= LLAVE_APERTURA LLAVE_CIERRE
    {: RESULT = sem.bloque_vacio(); :};
Expresion ::= E0: exp
    {: RESULT = exp; :};
ExpresionBasica ::= NUM_ENTERO: num
    {: RESULT = sem.num_entero(num); :};
ExpresionBasica ::= NUM_REAL: num
    {: RESULT = sem.num_real(num); :};
ExpresionBasica ::= VARIABLE: id
    {: RESULT = sem.id(id); :};
ExpresionBasica ::= TRUE
    {: RESULT = sem.true_(); :};
ExpresionBasica ::= FALSE
    {: RESULT = sem.false_(); :};
ExpresionBasica ::= NULL
    {: RESULT = sem.nulo(); :};
ExpresionBasica ::= CADENA: cadena
    {: RESULT = sem.cadena(cadena); :};

E0 ::= E1: e1 MAS E0: e2
    {: RESULT = sem.suma(e1, e2); :};
E0 ::= E1: e1 MENOS E1: e2
    {: RESULT = sem.resta(e1, e2); :};
E0 ::= E1: e
    {: RESULT = e; :};

E1 ::= E1: e1 OP1: op E2: e2
    {: RESULT = sem.exp(op, e1, e2); :};
E1 ::= E2: e
    {: RESULT = e; :};

E2 ::= E2: e1 OP2: op E3: e2
    {: RESULT = sem.exp(op, e1, e2); :};
E2 ::= E3: e
    {: RESULT = e; :};

E3 ::= E4: e1 OP3: op E4: e2
    {: RESULT = sem.exp(op, e1, e2); :};
E3 ::= E4: e
    {: RESULT = e; :};

E4 ::= NOT E4: e
    {: RESULT = sem.not(e); :};
E4 ::= MENOS E5: e
    {: RESULT = sem.menos(e); :};
E4 ::= E5: e
    {: RESULT = e; :};

E5 ::= E5: e1 CORAPERTURA Expresion: e2 CORCIERRE
    {: RESULT = sem.acceso_array(e1, e2); :};
E5 ::= E5: e OP5: op VARIABLE: id
    {: RESULT = sem.acceso_registro(op, e, id.toString()); :};
E5 ::= E6: e
    {: RESULT = e; :};
E6 ::= POR E6: e
    {: RESULT = sem.valor_puntero(e); :};
E6 ::= E7: e
    {: RESULT = e; :};

E7 ::= PAPERTURA Expresion: e PCIERRE
    {: RESULT = e; :};
E7 ::= ExpresionBasica: e
    {: RESULT = e; :};
OP1 ::= AND
    {: RESULT = "and"; :};
OP1 ::= OR
    {: RESULT = "or"; :};
OP2 ::= MAYOR 
    {: RESULT = ">"; :};
OP2 ::= MENOR 
    {: RESULT = "<"; :};
OP2 ::= MAYOR_IG 
    {: RESULT = ">="; :};
OP2 ::= MENOR_IG 
    {: RESULT = "<="; :};
OP2 ::= IGUAL_COMP 
    {: RESULT = "=="; :};
OP2 ::= DISTINTO
    {: RESULT = "!="; :};
OP3 ::= POR
    {: RESULT = "*"; :};
OP3 ::= DIV
    {: RESULT = "/"; :};
OP3 ::= POR_CIENTO
    {: RESULT = "%"; :};
OP5 ::= PUNTO
    {: RESULT = "."; :};
OP5 ::= FLECHA
    {: RESULT = "->"; :};
