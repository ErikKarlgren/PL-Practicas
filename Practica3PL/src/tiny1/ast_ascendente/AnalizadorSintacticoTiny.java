
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Mar 23 20:22:21 CET 2022
//----------------------------------------------------

package tiny1.ast_ascendente;

import java_cup.runtime.*;
import tiny1.alex.AnalizadorLexicoTiny;
import tiny1.alex.UnidadLexica;
import tiny1.errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Mar 23 20:22:21 CET 2022
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\006\000\002\005\005\000" +
    "\002\005\004\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\010\000\002\010\004\000\002\010\006\000" +
    "\002\011\005\000\002\011\003\000\002\012\004\000\002" +
    "\013\005\000\002\013\003\000\002\014\005\000\002\015" +
    "\003\000\002\015\002\000\002\014\007\000\002\014\011" +
    "\000\002\014\007\000\002\014\004\000\002\014\004\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\014\005\000\002\014\003\000\002\016\004\000\002\016" +
    "\005\000\002\017\005\000\002\017\003\000\002\020\005" +
    "\000\002\020\004\000\002\021\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\003\000\002\025\005\000\002\025\003\000" +
    "\002\026\005\000\002\026\003\000\002\027\004\000\002" +
    "\027\004\000\002\027\003\000\002\030\006\000\002\030" +
    "\004\000\002\030\003\000\002\031\004\000\002\031\003" +
    "\000\002\032\005\000\002\032\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\004\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\060\011\026\013\015\014\040\015\035\016" +
    "\024\020\021\021\004\025\010\034\027\036\017\042\032" +
    "\051\022\052\036\053\013\057\034\062\012\067\016\070" +
    "\006\071\033\072\007\073\030\074\050\075\011\001\002" +
    "\000\024\011\026\013\015\014\040\015\035\016\024\021" +
    "\004\034\027\036\017\051\022\001\002\000\006\007\225" +
    "\010\226\001\002\000\030\011\026\013\015\014\040\015" +
    "\035\016\024\020\021\021\004\025\010\034\027\036\017" +
    "\051\022\001\002\000\030\011\026\013\015\014\040\015" +
    "\035\016\024\020\021\021\004\025\010\034\027\036\017" +
    "\051\022\001\002\000\030\011\026\013\015\014\040\015" +
    "\035\016\024\020\021\021\004\025\010\034\027\036\017" +
    "\051\022\001\002\000\022\004\073\005\102\006\075\011" +
    "\100\050\101\063\077\064\076\066\103\001\002\000\004" +
    "\011\207\001\002\000\030\011\026\013\015\014\040\015" +
    "\035\016\024\020\021\021\004\025\010\034\027\036\017" +
    "\051\022\001\002\000\016\002\uffe7\010\uffe7\043\uffe7\055" +
    "\uffe7\056\uffe7\061\uffe7\001\002\000\072\002\uffcf\010\uffcf" +
    "\012\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\035\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\047\uffcf\054\uffcf\055\uffcf\056\uffcf\060\uffcf\061\uffcf" +
    "\001\002\000\030\011\026\013\015\014\040\015\035\016" +
    "\024\020\021\021\004\025\010\034\027\036\017\051\022" +
    "\001\002\000\072\002\uffcc\010\uffcc\012\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\060\uffcc\061\uffcc\001\002\000\072\002" +
    "\uffb9\010\uffb9\012\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\047\uffb9\054\uffb9\055\uffb9\056\uffb9\060" +
    "\uffb9\061\uffb9\001\002\000\024\011\026\013\015\014\040" +
    "\015\035\016\024\021\004\034\027\036\017\051\022\001" +
    "\002\000\072\002\uffcd\010\uffcd\012\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\060\uffcd\061\uffcd\001\002\000\004\002\175" +
    "\001\002\000\072\002\uffd1\010\uffd1\012\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\060\uffd1\061\uffd1\001\002\000\016\002" +
    "\uffda\010\uffda\043\uffda\055\uffda\056\uffda\061\uffda\001\002" +
    "\000\072\002\uffd0\010\uffd0\012\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\035\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\060\uffd0\061\uffd0\001\002\000\030\011\026\013" +
    "\015\014\040\015\035\016\024\020\021\021\004\025\010" +
    "\034\027\036\017\051\022\001\002\000\016\002\uffde\010" +
    "\uffde\043\uffde\055\uffde\056\uffde\061\uffde\001\002\000\010" +
    "\002\uffff\010\164\043\uffff\001\002\000\062\011\026\013" +
    "\015\014\040\015\035\016\024\020\021\021\004\025\010" +
    "\034\027\036\017\042\032\043\171\051\022\052\036\053" +
    "\013\057\034\062\012\067\016\070\006\071\033\072\007" +
    "\073\030\074\050\075\011\001\002\000\030\011\026\013" +
    "\015\014\040\015\035\016\024\020\021\021\004\025\010" +
    "\034\027\036\017\051\022\001\002\000\030\011\026\013" +
    "\015\014\040\015\035\016\024\020\021\021\004\025\010" +
    "\034\027\036\017\051\022\001\002\000\072\002\uffd2\010" +
    "\uffd2\012\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\047\uffd2\054\uffd2\055\uffd2\056\uffd2\060\uffd2\061" +
    "\uffd2\001\002\000\004\011\142\001\002\000\072\002\uffbb" +
    "\010\uffbb\012\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\047\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb" +
    "\061\uffbb\001\002\000\072\002\uffce\010\uffce\012\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce\037" +
    "\uffce\040\uffce\041\uffce\043\uffce\044\uffce\045\uffce\047\uffce" +
    "\054\uffce\055\uffce\056\uffce\060\uffce\061\uffce\001\002\000" +
    "\072\002\uffbd\010\uffbd\012\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\043\uffbd\044\uffbd\045\uffbd\047\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\060\uffbd\061\uffbd\001\002\000\006\007\ufffd\010\ufffd" +
    "\001\002\000\072\002\uffc0\010\uffc0\012\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\035\uffc0\037\uffc0\040" +
    "\132\041\uffc0\043\uffc0\044\134\045\133\047\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\060\uffc0\061\uffc0\001\002\000\064\002" +
    "\uffc3\010\uffc3\012\uffc3\017\uffc3\020\uffc3\021\130\022\127" +
    "\023\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\035\uffc3\037\126\041\uffc3\043\uffc3\047\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3\001\002\000" +
    "\004\012\123\001\002\000\056\002\uffc5\010\uffc5\012\uffc5" +
    "\017\uffc5\020\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5\041\uffc5\043\uffc5" +
    "\047\uffc5\054\uffc5\055\uffc5\056\uffc5\060\uffc5\061\uffc5\001" +
    "\002\000\056\002\uffc7\010\uffc7\012\uffc7\017\uffc7\020\uffc7" +
    "\023\uffc7\024\uffc7\026\067\027\070\030\063\031\062\032" +
    "\065\033\066\035\uffc7\041\uffc7\043\uffc7\047\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\060\uffc7\061\uffc7\001\002\000\022\004" +
    "\073\005\102\006\075\011\100\050\101\063\077\064\076" +
    "\066\103\001\002\000\042\002\uffc9\010\uffc9\012\uffc9\017" +
    "\053\020\056\023\054\024\057\035\uffc9\041\uffc9\043\uffc9" +
    "\047\uffc9\054\uffc9\055\uffc9\056\uffc9\060\uffc9\061\uffc9\001" +
    "\002\000\032\002\uffd3\010\uffd3\012\uffd3\035\uffd3\041\uffd3" +
    "\043\uffd3\047\uffd3\054\uffd3\055\uffd3\056\uffd3\060\uffd3\061" +
    "\uffd3\001\002\000\030\011\026\013\015\014\040\015\035" +
    "\016\024\020\021\021\004\025\010\034\027\036\017\051" +
    "\022\001\002\000\030\011\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\020\uffb8\021\uffb8\025\uffb8\034\uffb8\036\uffb8\051" +
    "\uffb8\001\002\000\030\011\026\013\015\014\040\015\035" +
    "\016\024\020\021\021\004\025\010\034\027\036\017\051" +
    "\022\001\002\000\030\011\026\013\015\014\040\015\035" +
    "\016\024\020\021\021\004\025\010\034\027\036\017\051" +
    "\022\001\002\000\030\011\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\020\uffb7\021\uffb7\025\uffb7\034\uffb7\036\uffb7\051" +
    "\uffb7\001\002\000\036\002\uffca\010\uffca\012\uffca\023\054" +
    "\024\057\035\uffca\041\uffca\043\uffca\047\uffca\054\uffca\055" +
    "\uffca\056\uffca\060\uffca\061\uffca\001\002\000\056\002\uffc8" +
    "\010\uffc8\012\uffc8\017\uffc8\020\uffc8\023\uffc8\024\uffc8\026" +
    "\067\027\070\030\063\031\062\032\065\033\066\035\uffc8" +
    "\041\uffc8\043\uffc8\047\uffc8\054\uffc8\055\uffc8\056\uffc8\060" +
    "\uffc8\061\uffc8\001\002\000\030\011\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\020\uffb4\021\uffb4\025\uffb4\034\uffb4\036" +
    "\uffb4\051\uffb4\001\002\000\030\011\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\020\uffb3\021\uffb3\025\uffb3\034\uffb3\036" +
    "\uffb3\051\uffb3\001\002\000\030\011\026\013\015\014\040" +
    "\015\035\016\024\020\021\021\004\025\010\034\027\036" +
    "\017\051\022\001\002\000\030\011\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\020\uffb2\021\uffb2\025\uffb2\034\uffb2\036" +
    "\uffb2\051\uffb2\001\002\000\030\011\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\020\uffb1\021\uffb1\025\uffb1\034\uffb1\036" +
    "\uffb1\051\uffb1\001\002\000\030\011\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\020\uffb5\021\uffb5\025\uffb5\034\uffb5\036" +
    "\uffb5\051\uffb5\001\002\000\030\011\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\020\uffb6\021\uffb6\025\uffb6\034\uffb6\036" +
    "\uffb6\051\uffb6\001\002\000\056\002\uffc6\010\uffc6\012\uffc6" +
    "\017\uffc6\020\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6\041\uffc6\043\uffc6" +
    "\047\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6\001" +
    "\002\000\032\002\uffcb\010\uffcb\012\uffcb\035\uffcb\041\uffcb" +
    "\043\uffcb\047\uffcb\054\uffcb\055\uffcb\056\uffcb\060\uffcb\061" +
    "\uffcb\001\002\000\006\011\ufff3\046\ufff3\001\002\000\004" +
    "\011\122\001\002\000\006\011\ufff1\046\ufff1\001\002\000" +
    "\004\040\115\001\002\000\004\042\105\001\002\000\006" +
    "\011\uffef\046\uffef\001\002\000\006\011\ufff0\046\ufff0\001" +
    "\002\000\006\011\ufff2\046\ufff2\001\002\000\022\004\073" +
    "\005\102\006\075\011\100\050\101\063\077\064\076\066" +
    "\103\001\002\000\006\011\uffed\046\uffed\001\002\000\022" +
    "\004\073\005\102\006\075\011\100\050\101\063\077\064" +
    "\076\066\103\001\002\000\004\011\114\001\002\000\006" +
    "\010\111\043\112\001\002\000\006\010\uffea\043\uffea\001" +
    "\002\000\022\004\073\005\102\006\075\011\100\050\101" +
    "\063\077\064\076\066\103\001\002\000\006\011\uffec\046" +
    "\uffec\001\002\000\006\010\uffeb\043\uffeb\001\002\000\006" +
    "\010\uffe9\043\uffe9\001\002\000\004\015\116\001\002\000" +
    "\004\041\117\001\002\000\004\065\120\001\002\000\022" +
    "\004\073\005\102\006\075\011\100\050\101\063\077\064" +
    "\076\066\103\001\002\000\006\011\uffee\046\uffee\001\002" +
    "\000\006\007\ufffc\010\ufffc\001\002\000\030\011\026\013" +
    "\015\014\040\015\035\016\024\020\021\021\004\025\010" +
    "\034\027\036\017\051\022\001\002\000\016\002\uffe6\010" +
    "\uffe6\043\uffe6\055\uffe6\056\uffe6\061\uffe6\001\002\000\030" +
    "\011\026\013\015\014\040\015\035\016\024\020\021\021" +
    "\004\025\010\034\027\036\017\051\022\001\002\000\030" +
    "\011\uffae\013\uffae\014\uffae\015\uffae\016\uffae\020\uffae\021" +
    "\uffae\025\uffae\034\uffae\036\uffae\051\uffae\001\002\000\030" +
    "\011\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\020\uffaf\021" +
    "\uffaf\025\uffaf\034\uffaf\036\uffaf\051\uffaf\001\002\000\030" +
    "\011\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0\021" +
    "\uffb0\025\uffb0\034\uffb0\036\uffb0\051\uffb0\001\002\000\056" +
    "\002\uffc4\010\uffc4\012\uffc4\017\uffc4\020\uffc4\023\uffc4\024" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\035\uffc4\041\uffc4\043\uffc4\047\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\060\uffc4\061\uffc4\001\002\000\030\011\026\013\015" +
    "\014\040\015\035\016\024\020\021\021\004\025\010\034" +
    "\027\036\017\051\022\001\002\000\004\011\137\001\002" +
    "\000\004\011\136\001\002\000\072\002\uffbe\010\uffbe\012" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\047\uffbe\054\uffbe\055\uffbe\056\uffbe\060\uffbe\061\uffbe\001" +
    "\002\000\072\002\uffad\010\uffad\012\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\035\uffad\037\uffad\040\uffad" +
    "\041\uffad\043\uffad\044\uffad\045\uffad\047\uffad\054\uffad\055" +
    "\uffad\056\uffad\060\uffad\061\uffad\001\002\000\072\002\uffac" +
    "\010\uffac\012\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\035\uffac\037\uffac\040\uffac\041\uffac\043\uffac\044" +
    "\uffac\045\uffac\047\uffac\054\uffac\055\uffac\056\uffac\060\uffac" +
    "\061\uffac\001\002\000\004\041\141\001\002\000\072\002" +
    "\uffbf\010\uffbf\012\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\047\uffbf\054\uffbf\055\uffbf\056\uffbf\060" +
    "\uffbf\061\uffbf\001\002\000\004\034\143\001\002\000\024" +
    "\004\073\005\102\006\075\011\100\035\151\050\101\063" +
    "\077\064\076\066\103\001\002\000\004\042\032\001\002" +
    "\000\006\007\ufffa\010\ufffa\001\002\000\006\035\ufff6\047" +
    "\ufff6\001\002\000\006\011\156\046\155\001\002\000\006" +
    "\035\153\047\152\001\002\000\004\042\ufff8\001\002\000" +
    "\022\004\073\005\102\006\075\011\100\050\101\063\077" +
    "\064\076\066\103\001\002\000\004\042\ufff9\001\002\000" +
    "\006\035\ufff7\047\ufff7\001\002\000\004\011\157\001\002" +
    "\000\006\035\ufff4\047\ufff4\001\002\000\006\035\ufff5\047" +
    "\ufff5\001\002\000\004\060\161\001\002\000\054\011\026" +
    "\013\015\014\040\015\035\016\024\020\021\021\004\025" +
    "\010\034\027\036\017\042\032\051\022\053\013\057\034" +
    "\061\uffe4\062\012\067\016\070\006\071\033\072\007\073" +
    "\030\001\002\000\004\061\166\001\002\000\012\010\164" +
    "\055\uffe5\056\uffe5\061\uffe5\001\002\000\052\011\026\013" +
    "\015\014\040\015\035\016\024\020\021\021\004\025\010" +
    "\034\027\036\017\042\032\051\022\053\013\057\034\062" +
    "\012\067\016\070\006\071\033\072\007\073\030\001\002" +
    "\000\016\002\uffe8\010\uffe8\043\uffe8\055\uffe8\056\uffe8\061" +
    "\uffe8\001\002\000\016\002\uffe1\010\uffe1\043\uffe1\055\uffe1" +
    "\056\uffe1\061\uffe1\001\002\000\016\002\uffe0\010\uffe0\043" +
    "\uffe0\055\uffe0\056\uffe0\061\uffe0\001\002\000\004\043\172" +
    "\001\002\000\020\002\uffd4\007\uffd4\010\uffd4\043\uffd4\055" +
    "\uffd4\056\uffd4\061\uffd4\001\002\000\020\002\uffd5\007\uffd5" +
    "\010\uffd5\043\uffd5\055\uffd5\056\uffd5\061\uffd5\001\002\000" +
    "\004\035\174\001\002\000\072\002\uffba\010\uffba\012\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\035\uffba" +
    "\037\uffba\040\uffba\041\uffba\043\uffba\044\uffba\045\uffba\047" +
    "\uffba\054\uffba\055\uffba\056\uffba\060\uffba\061\uffba\001\002" +
    "\000\004\002\000\001\002\000\072\002\uffc1\010\uffc1\012" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035" +
    "\uffc1\037\uffc1\040\132\041\uffc1\043\uffc1\044\134\045\133" +
    "\047\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1\001" +
    "\002\000\016\002\uffdd\010\uffdd\043\uffdd\055\uffdd\056\uffdd" +
    "\061\uffdd\001\002\000\004\054\201\001\002\000\056\011" +
    "\026\013\015\014\040\015\035\016\024\020\021\021\004" +
    "\025\010\034\027\036\017\042\032\051\022\053\013\055" +
    "\uffe4\056\uffe4\057\034\062\012\067\016\070\006\071\033" +
    "\072\007\073\030\001\002\000\006\055\203\056\204\001" +
    "\002\000\054\011\026\013\015\014\040\015\035\016\024" +
    "\020\021\021\004\025\010\034\027\036\017\042\032\051" +
    "\022\053\013\056\uffe4\057\034\062\012\067\016\070\006" +
    "\071\033\072\007\073\030\001\002\000\016\002\uffe3\010" +
    "\uffe3\043\uffe3\055\uffe3\056\uffe3\061\uffe3\001\002\000\004" +
    "\056\206\001\002\000\016\002\uffe2\010\uffe2\043\uffe2\055" +
    "\uffe2\056\uffe2\061\uffe2\001\002\000\004\034\210\001\002" +
    "\000\032\011\026\013\015\014\040\015\035\016\024\020" +
    "\021\021\004\025\010\034\027\035\212\036\017\051\022" +
    "\001\002\000\016\002\uffdb\010\uffdb\043\uffdb\055\uffdb\056" +
    "\uffdb\061\uffdb\001\002\000\016\002\uffd9\010\uffd9\043\uffd9" +
    "\055\uffd9\056\uffd9\061\uffd9\001\002\000\006\035\216\047" +
    "\215\001\002\000\006\035\uffd6\047\uffd6\001\002\000\030" +
    "\011\026\013\015\014\040\015\035\016\024\020\021\021" +
    "\004\025\010\034\027\036\017\051\022\001\002\000\016" +
    "\002\uffd8\010\uffd8\043\uffd8\055\uffd8\056\uffd8\061\uffd8\001" +
    "\002\000\006\035\uffd7\047\uffd7\001\002\000\004\011\221" +
    "\001\002\000\006\007\ufffb\010\ufffb\001\002\000\064\002" +
    "\uffc2\010\uffc2\012\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\035\uffc2\037\uffc2\041\uffc2\043\uffc2\047\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\060\uffc2\061\uffc2\001\002\000" +
    "\016\002\uffdf\010\uffdf\043\uffdf\055\uffdf\056\uffdf\061\uffdf" +
    "\001\002\000\016\002\uffdc\010\uffdc\043\uffdc\055\uffdc\056" +
    "\uffdc\061\uffdc\001\002\000\052\011\026\013\015\014\040" +
    "\015\035\016\024\020\021\021\004\025\010\034\027\036" +
    "\017\042\032\051\022\053\013\057\034\062\012\067\016" +
    "\070\006\071\033\072\007\073\030\001\002\000\010\052" +
    "\036\074\050\075\011\001\002\000\006\007\ufffe\010\ufffe" +
    "\001\002\000\010\002\001\010\164\043\001\001\002\000" +
    "\072\002\uffbc\010\uffbc\012\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\047\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\060\uffbc\061\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\042\002\022\003\004\004\041\013\030\014" +
    "\013\020\024\021\044\022\017\023\051\024\050\025\046" +
    "\026\045\027\043\030\042\031\040\032\036\001\001\000" +
    "\010\022\017\031\230\032\036\001\001\000\002\001\001" +
    "\000\026\021\223\022\017\023\051\024\050\025\046\026" +
    "\045\027\043\030\042\031\040\032\036\001\001\000\026" +
    "\021\222\022\017\023\051\024\050\025\046\026\045\027" +
    "\043\030\042\031\040\032\036\001\001\000\014\022\017" +
    "\027\221\030\042\031\040\032\036\001\001\000\004\010" +
    "\217\001\001\000\002\001\001\000\026\021\177\022\017" +
    "\023\051\024\050\025\046\026\045\027\043\030\042\031" +
    "\040\032\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\021\176\022\017\023\051\024\050\025\046\026" +
    "\045\027\043\030\042\031\040\032\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\017\030\175\031" +
    "\040\032\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\021\172\022\017\023\051\024\050\025\046\026\045" +
    "\027\043\030\042\031\040\032\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\002\167\003\004\004\041" +
    "\013\030\014\013\020\024\021\044\022\017\023\051\024" +
    "\050\025\046\026\045\027\043\030\042\031\040\032\036" +
    "\001\001\000\026\021\166\022\017\023\051\024\050\025" +
    "\046\026\045\027\043\030\042\031\040\032\036\001\001" +
    "\000\026\021\157\022\017\023\051\024\050\025\046\026" +
    "\045\027\043\030\042\031\040\032\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\134" +
    "\001\001\000\004\035\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\063\001\001\000\004\010\073" +
    "\001\001\000\004\033\054\001\001\000\002\001\001\000" +
    "\024\022\017\023\071\024\050\025\046\026\045\027\043" +
    "\030\042\031\040\032\036\001\001\000\002\001\001\000" +
    "\020\022\017\025\060\026\045\027\043\030\042\031\040" +
    "\032\036\001\001\000\022\022\017\024\057\025\046\026" +
    "\045\027\043\030\042\031\040\032\036\001\001\000\002" +
    "\001\001\000\004\033\054\001\001\000\004\034\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\022\017" +
    "\026\070\027\043\030\042\031\040\032\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\103\001\001\000\002\001\001" +
    "\000\010\010\105\011\106\012\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\105" +
    "\012\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\021\123\022\017\023\051\024\050" +
    "\025\046\026\045\027\043\030\042\031\040\032\036\001" +
    "\001\000\002\001\001\000\014\022\017\027\130\030\042" +
    "\031\040\032\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\021\137" +
    "\022\017\023\051\024\050\025\046\026\045\027\043\030" +
    "\042\031\040\032\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\143" +
    "\001\001\000\010\006\147\007\145\010\146\001\001\000" +
    "\004\020\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\153\010\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\013\162\014\013\015\161" +
    "\020\024\021\044\022\017\023\051\024\050\025\046\026" +
    "\045\027\043\030\042\031\040\032\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\014\164\020\024\021" +
    "\044\022\017\023\051\024\050\025\046\026\045\027\043" +
    "\030\042\031\040\032\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\013\162\014\013\015" +
    "\201\020\024\021\044\022\017\023\051\024\050\025\046" +
    "\026\045\027\043\030\042\031\040\032\036\001\001\000" +
    "\002\001\001\000\036\013\162\014\013\015\204\020\024" +
    "\021\044\022\017\023\051\024\050\025\046\026\045\027" +
    "\043\030\042\031\040\032\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\210\001" +
    "\001\000\030\017\212\021\213\022\017\023\051\024\050" +
    "\025\046\026\045\027\043\030\042\031\040\032\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\021\216\022\017\023\051\024" +
    "\050\025\046\026\045\027\043\030\042\031\040\032\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\013\227\014\013\020\024\021" +
    "\044\022\017\023\051\024\050\025\046\026\045\027\043" +
    "\030\042\031\040\032\036\001\001\000\004\004\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Declaraciones SEP_SEC Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaraciones PCOMA Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion ::= VAR Tipo VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= TYPE Tipo VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= PROC VARIABLE Params Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Params ::= PAPERTURA ListaParams PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Params ::= PAPERTURA PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListaParams ::= ListaParams COMA Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaParams",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListaParams ::= Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaParams",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Param ::= Tipo AMPERSAND VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Param ::= Tipo VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= ARRAY CORAPERTURA NUM_ENTERO CORCIERRE OF Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= POINTER Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= RECORD LLAVE_APERTURA Campos LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Campos ::= Campos PCOMA Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campos",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Campos ::= Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campos",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Campo ::= Tipo VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instrucciones ::= Instrucciones PCOMA Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instrucciones ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruccion ::= Expresion IGUAL_ASIG Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // InstruccionesOpt ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionesOpt",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // InstruccionesOpt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionesOpt",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= IF Expresion THEN InstruccionesOpt ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruccion ::= IF Expresion THEN InstruccionesOpt ELSE InstruccionesOpt ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruccion ::= WHILE Expresion DO InstruccionesOpt ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= READ Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= WRITE Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= NEW Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= DELETE Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= CALL VARIABLE ParamsReal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ParamsReal ::= PAPERTURA PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamsReal",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ParamsReal ::= PAPERTURA Expresiones PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamsReal",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresiones ::= Expresiones COMA Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expresiones",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresiones ::= Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expresiones",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bloque ::= LLAVE_APERTURA Programa LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bloque ::= LLAVE_APERTURA LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expresion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpresionBasica ::= NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpresionBasica ::= NUM_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpresionBasica ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpresionBasica ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpresionBasica ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpresionBasica ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionBasica ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E0 ::= E1 MAS E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E0 ::= E1 MENOS E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E1 ::= E1 OP1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E2 OP2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E3 ::= E4 OP3 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E4 ::= MENOS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E5 ::= E5 CORAPERTURA Expresion CORCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E5 ::= E5 OP5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E6 ::= POR E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= PAPERTURA Expresion PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= ExpresionBasica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP1 ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP1 ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP2 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP2 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP2 ::= MAYOR_IG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP2 ::= MENOR_IG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP2 ::= IGUAL_COMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP2 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP3 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP3 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP3 ::= POR_CIENTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP5 ::= PUNTO VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP5 ::= FLECHA VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

