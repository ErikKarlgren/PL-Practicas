type pointer tNodo tArbol;
type record {
 string nombre;
 tArbol izq;
 tArbol der
 } tNodo;
type record {
 array [50] of string nombres;
 int cont
} tListaNombres;
var tListaNombres nombres; # Aquí se guardarán los nombres leídos (max. 50)
var tArbol arbol; # Aquí se construirá un árbol de búsqueda que contendrá
 # los nombres leídos, sin duplicados
 # Lee los nombres a ordenar (max. 50 nombres)
proc lee_nombres(tListaNombres & nombres) {
 var int i
 &&
 write "Introduce el número de nombres a ordenar (max 50): "; nl;
 read nombres.cont;
 while (nombres.cont < 0) or (nombres.cont > 50) do
 write "Introduce el número de nombres a ordenar (max 50): "; nl;
 read nombres.cont
 endwhile;
 i=0;
 write "Introduce un nombre en cada línea: "; nl;
 while i < nombres.cont do
 read nombres.nombres[i];
 i = i + 1
 endwhile
}; # Fin del procedimiento lee_nombres

 # Construye un árbol de búsqueda sin duplicados con los nombres leídos
 # Hace un uso global de las variables 'nombres’ y 'arbol' declaradas en
 # el programa principal
proc construye_arbol() {
 var int i; # para iterar sobre la lista de nombres
 # Inserta el nombre actual en el árbol de búsqueda que recibe como parámetro.
 # Hace un uso global de la variable 'nombres' declarado en el programa principal,
 # y en del contador 'i' declarado en el subprograma contenedor 'construye_arbol'
 proc inserta_nombre(tArbol& arbol) {
 if arbol == null then
new arbol;
 arbol->nombre = nombres.nombres[i];
 arbol->izq = null;
 arbol->der = null
 else {
 var tArbol padre; # apuntará al nodo padre del nuevo nodo a insertar
 var tArbol act; # para recorrer la rama al final de la cuál debe realizarse
 # la inserción.
 var bool fin # para controlar el final del recorrido de la rama
 &&
 fin = false;
 padre = null;
 act = arbol;
while not fin do
 padre = act;
 if act->nombre < nombres.nombres[i] then #insertar en el hijo derecho